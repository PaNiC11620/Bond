import { Pool } from 'pg';
import dotenv from 'dotenv';

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
if (process.env.NODE_ENV !== 'production') {
  dotenv.config({ path: '.env' });
}

console.log('üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:');
console.log('- Environment:', process.env.NODE_ENV || 'development');
console.log('- Database URL:', process.env.DATABASE_URL ? '–í–°–¢–ê–ù–û–í–õ–ï–ù–û (Render PostgreSQL)' : '–ù–ï –í–°–¢–ê–ù–û–í–õ–ï–ù–û');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 
    'postgresql://bond_user:X1fbNEWIXUUo12pkyxZlDbUdK2QSYLjh@dpg-d1v7k2ruibrs7395bju0-a.frankfurt-postgres.render.com/db_63dv',
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
});

// –¢–∏–ø–∏ –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
export interface Order {
  id: number;
  customer_name: string;
  customer_phone: string;
  customer_email: string;
  coffee_type: string;
  package_size: string;
  quantity: number;
  total_price: number;
  status: string;
  created_at: Date;
  updated_at: Date;
}

export interface OrderInput {
  customer_name: string;
  customer_phone: string;
  customer_email: string;
  coffee_type: string;
  package_size: string;
  quantity: number;
  total_price: number;
}

export interface ContactMessage {
  id: number;
  name: string;
  email: string;
  message: string;
  created_at: Date;
}

export interface ContactMessageInput {
  name: string;
  email: string;
  message: string;
}

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏
export const ordersDB = {
  async create(order: OrderInput): Promise<Order> {
    const query = `
      INSERT INTO orders (customer_name, customer_phone, customer_email, coffee_type, package_size, quantity, total_price) 
      VALUES ($1, $2, $3, $4, $5, $6, $7) 
      RETURNING *
    `;
    
    const result = await pool.query(query, [
      order.customer_name,
      order.customer_phone,
      order.customer_email,
      order.coffee_type,
      order.package_size,
      order.quantity,
      order.total_price
    ]);
    
    return result.rows[0];
  },

  async getAll(): Promise<Order[]> {
    const query = 'SELECT * FROM orders ORDER BY created_at DESC';
    const result = await pool.query(query);
    return result.rows;
  },

  async getById(id: number): Promise<Order | null> {
    const query = 'SELECT * FROM orders WHERE id = $1';
    const result = await pool.query(query, [id]);
    return result.rows[0] || null;
  },

  async updateStatus(id: number, status: string): Promise<Order | null> {
    const query = 'UPDATE orders SET status = $1, updated_at = NOW() WHERE id = $2 RETURNING *';
    const result = await pool.query(query, [status, id]);
    return result.rows[0] || null;
  },

  async delete(id: number): Promise<boolean> {
    const query = 'DELETE FROM orders WHERE id = $1';
    const result = await pool.query(query, [id]);
    return result.rowCount !== null && result.rowCount > 0;
  }
};

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
export const contactDB = {
  async create(message: ContactMessageInput): Promise<ContactMessage> {
    const query = `
      INSERT INTO contact_messages (name, email, message) 
      VALUES ($1, $2, $3) 
      RETURNING *
    `;
    
    const result = await pool.query(query, [
      message.name,
      message.email,
      message.message
    ]);
    
    return result.rows[0];
  },

  async getAll(): Promise<ContactMessage[]> {
    const query = 'SELECT * FROM contact_messages ORDER BY created_at DESC';
    const result = await pool.query(query);
    return result.rows;
  },

  async getById(id: number): Promise<ContactMessage | null> {
    const query = 'SELECT * FROM contact_messages WHERE id = $1';
    const result = await pool.query(query, [id]);
    return result.rows[0] || null;
  },

  async delete(id: number): Promise<boolean> {
    const query = 'DELETE FROM contact_messages WHERE id = $1';
    const result = await pool.query(query, [id]);
    return result.rowCount !== null && result.rowCount > 0;
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
export const initDatabase = async (): Promise<void> => {
  try {
    console.log('üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...');
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –∑–∞–º–æ–≤–ª–µ–Ω—å, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
    await pool.query(`
      CREATE TABLE IF NOT EXISTS orders (
        id SERIAL PRIMARY KEY,
        customer_name VARCHAR(255) NOT NULL,
        customer_phone VARCHAR(50) NOT NULL,
        customer_email VARCHAR(255) NOT NULL,
        coffee_type VARCHAR(255) NOT NULL,
        package_size VARCHAR(50) NOT NULL,
        quantity INTEGER NOT NULL DEFAULT 1,
        total_price DECIMAL(10,2) NOT NULL,
        status VARCHAR(50) NOT NULL DEFAULT 'pending',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      )
    `);

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    await pool.query(`
      CREATE TABLE IF NOT EXISTS contact_messages (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        email VARCHAR(255) NOT NULL,
        message TEXT NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      )
    `);

    // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
    await pool.query(`
      CREATE INDEX IF NOT EXISTS idx_orders_created_at ON orders(created_at DESC)
    `);
    
    await pool.query(`
      CREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status)
    `);

    await pool.query(`
      CREATE INDEX IF NOT EXISTS idx_contact_messages_created_at ON contact_messages(created_at DESC)
    `);

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è updated_at
    await pool.query(`
      CREATE OR REPLACE FUNCTION update_updated_at_column()
      RETURNS TRIGGER AS $$
      BEGIN
        NEW.updated_at = NOW();
        RETURN NEW;
      END;
      $$ language 'plpgsql'
    `);

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∏–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è updated_at
    await pool.query(`
      DROP TRIGGER IF EXISTS update_orders_updated_at ON orders
    `);
    
    await pool.query(`
      CREATE TRIGGER update_orders_updated_at
        BEFORE UPDATE ON orders
        FOR EACH ROW
        EXECUTE FUNCTION update_updated_at_column()
    `);

    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
export const testConnection = async (): Promise<boolean> => {
  try {
    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL...');
    await pool.query('SELECT NOW()');
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL —É—Å–ø—ñ—à–Ω–µ');
    return true;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL:');
    console.error('–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:', error);
    
    if (error instanceof Error) {
      if (error.message.includes('password authentication failed')) {
        console.log('üí° –ü–æ–º–∏–ª–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–∞—Ä–æ–ª—å —É .env –∞–±–æ –Ω–∞ Render.');
        return false;
      }
      if (error.message.includes('connection refused') || error.message.includes('timeout')) {
        console.log('üí° –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Ö–æ—Å—Ç–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –ë–î.');
        return false;
      }
      if (error.message.includes('database "db_63dv" does not exist')) {
          console.log('üí° –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ DATABASE_URL.');
          return false;
      }
    }
    
    return false;
  }
};

export default pool;