import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import path from 'path';
import { ordersDB, contactDB, createDatabaseIfNotExists, initDatabase, testConnection } from '../lib/database';

dotenv.config({ path: '.env' });

const app = express();
const PORT = process.env.SERVER_PORT || 3001;

app.use(cors({
  origin: ['http://localhost:5173', 'http://127.0.0.1:5173'],
  credentials: true
}));
app.use(express.json());

if (process.env.NODE_ENV === 'production') {
  app.use(express.static(path.join(__dirname, '../dist')));
  
  app.get('*', (req, res, next) => {
    if (req.path.startsWith('/api')) {
      return next();
    }
    res.sendFile(path.join(__dirname, '../dist/index.html'));
  });
}

app.post('/api/orders', async (req, res) => {
  try {
    console.log('üìù –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', req.body);
    
    const order = await ordersDB.create(req.body);
    
    console.log('‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ:', order);
    res.status(201).json({
      success: true,
      data: order,
      message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ'
    });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
    res.status(500).json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'
    });
  }
});

app.get('/api/orders', async (req, res) => {
  try {
    const orders = await ordersDB.getAll();
    res.json({
      success: true,
      data: orders
    });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å:', error);
    res.status(500).json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å'
    });
  }
});

app.get('/api/orders/:id', async (req, res) => {
  try {
    const id = parseInt(req.params.id);
    const order = await ordersDB.getById(id);
    
    if (!order) {
      return res.status(404).json({
        success: false,
        error: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }
    
    res.json({
      success: true,
      data: order
    });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
    res.status(500).json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'
    });
  }
});

app.put('/api/orders/:id/status', async (req, res) => {
  try {
    const id = parseInt(req.params.id);
    const { status } = req.body;
    
    const order = await ordersDB.updateStatus(id, status);
    
    if (!order) {
      return res.status(404).json({
        success: false,
        error: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }
    
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #${id} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: ${status}`);
    res.json({
      success: true,
      data: order,
      message: '–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ'
    });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:', error);
    res.status(500).json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É'
    });
  }
});

app.delete('/api/orders/:id', async (req, res) => {
  try {
    const id = parseInt(req.params.id);
    const deleted = await ordersDB.delete(id);
    
    if (!deleted) {
      return res.status(404).json({
        success: false,
        error: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }
    
    console.log(`‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #${id} –≤–∏–¥–∞–ª–µ–Ω–æ`);
    res.json({
      success: true,
      message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ'
    });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
    res.status(500).json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'
    });
  }
});

app.post('/api/contact', async (req, res) => {
  try {
    console.log('üìß –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', req.body);
    
    const message = await contactDB.create(req.body);
    
    console.log('‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ:', message);
    res.status(201).json({
      success: true,
      data: message,
      message: '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ'
    });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
    res.status(500).json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
    });
  }
});

app.get('/api/contact', async (req, res) => {
  try {
    const messages = await contactDB.getAll();
    res.json({
      success: true,
      data: messages
    });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:', error);
    res.status(500).json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å'
    });
  }
});

app.delete('/api/contact/:id', async (req, res) => {
  try {
    const id = parseInt(req.params.id);
    const deleted = await contactDB.delete(id);
    
    if (!deleted) {
      return res.status(404).json({
        success: false,
        error: '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }
    
    console.log(`‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è #${id} –≤–∏–¥–∞–ª–µ–Ω–æ`);
    res.json({
      success: true,
      message: '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ'
    });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
    res.status(500).json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
    });
  }
});

app.get('/api/health', async (req, res) => {
  const dbConnected = await testConnection();
  res.json({
    success: true,
    server: 'Bond Coffee API',
    database: dbConnected ? 'connected' : 'disconnected',
    timestamp: new Date().toISOString()
  });
});

const startServer = async () => {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Bond Coffee...');
    console.log('üìã –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è...');

    if (!process.env.DB_PASSWORD) {
      console.error('‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: DB_PASSWORD –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ .env.local');
      console.log('üí° –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª .env.local —Ç–∞ –¥–æ–¥–∞–π—Ç–µ:');
      console.log('DB_HOST=localhost');
      console.log('DB_PORT=5432');
      console.log('DB_NAME=bond_coffee');
      console.log('DB_USER=postgres');
      console.log('DB_PASSWORD=–≤–∞—à_–ø–∞—Ä–æ–ª—å');
      process.exit(1);
    }

    let dbConnected = await testConnection();
    
    if (!dbConnected) {
      try {
        console.log('üîß –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö...');
        await createDatabaseIfNotExists();
        dbConnected = await testConnection();
      } catch (createError) {
        console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö:', createError);
        console.log('\nüí° –ú–æ–∂–ª–∏–≤—ñ —Ä—ñ—à–µ–Ω–Ω—è:');
        console.log('1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π PostgreSQL —Å–µ—Ä–≤–µ—Ä');
        console.log('2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö —É .env.local');
        console.log('3. –°—Ç–≤–æ—Ä—ñ—Ç—å –±–∞–∑—É –¥–∞–Ω–∏—Ö –≤—Ä—É—á–Ω—É:');
        console.log('   sudo -u postgres psql');
        console.log('   CREATE DATABASE bond_coffee;');
        console.log('   \\q');
        process.exit(1);
      }
    }

    if (!dbConnected) {
      console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');
      process.exit(1);
    }

    await initDatabase();

    app.listen(PORT, () => {
      console.log('\nüéâ –°–µ—Ä–≤–µ—Ä Bond Coffee —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!');
      console.log(`üåê Frontend: http://localhost:5173`);
      console.log(`üîå Backend API: http://localhost:${PORT}/api`);
      console.log(`üè• Health check: http://localhost:${PORT}/api/health`);
      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
      console.log('‚úÖ PostgreSQL –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
      console.log('‚úÖ API –≥–æ—Ç–æ–≤–µ –¥–æ —Ä–æ–±–æ—Ç–∏');
      console.log('\nüéØ –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ —Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!');
    });
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
};

startServer();